import { InZero } from "@in/zero";
// InZero-lint-ignore-file no-explicit-any
// Generate icon-variants.generated.d.ts from icon components

const ICON_DIR = new URL("../src/icon/", import.meta.url);
const OUT_FILE = new URL(
  "../src/icon/icon-variants.generated.d.ts",
  import.meta.url
);

function isSkippable(name: string): boolean {
  return (
    name === "index.ts" ||
    name === "style.ts" ||
    name === "type.ts" ||
    name === "component.tsx" || // dynamic resolver
    name.endsWith(".map")
  );
}

async function collectIconNames(): Promise<string[]> {
  const names: string[] = [];
  for await (const entry of InZero.readDir(ICON_DIR)) {
    if (!entry.isFile) continue;
    const name = entry.name;
    if (!name.endsWith(".tsx")) continue;
    if (isSkippable(name)) continue;

    const fileUrl = new URL(name, ICON_DIR);
    const source = await InZero.readTextFile(fileUrl);

    // Match `export function Name(` or `export const Name =`
    const funcMatch = [
      ...source.matchAll(/export\s+function\s+(\w+)\s*\(/g),
    ].map((m) => m[1]);
    const constMatch = [...source.matchAll(/export\s+const\s+(\w+)\s*=/g)].map(
      (m) => m[1]
    );
    const candidates = [...funcMatch, ...constMatch];
    for (const c of candidates) {
      if (c === "Icon") continue; // never include dynamic Icon
      if (/Icon$/.test(c)) names.push(c);
    }
  }

  // de-duplicate and sort
  return Array.from(new Set(names)).sort((a, b) => a.localeCompare(b));
}

function generateDts(names: string[]): string {
  const header = `// AUTO-GENERATED by modules/in-widget/scripts/generate-icon-variants.ts â€“ DO NOT EDIT\n`;
  const union = names.map((n) => `  | '${n}'`).join("\n");
  const arr = names.map((n) => `  '${n}',`).join("\n");

  return (
    header +
    `\nexport type IconVariant =\n${union};\n\nexport const ICON_VARIANTS: readonly IconVariant[] = [\n${arr}\n] as const;\n`
  );
}

const names = await collectIconNames();
const dts = generateDts(names);
await InZero.writeTextFile(OUT_FILE, dts);
console.log(`Generated ${OUT_FILE.pathname} with ${names.length} variants.`);
